{
    "skills":{"description":{
        "HTML_CSS_SASS_Figma":["웹 페이지의 기본 구조를 정의하며, 효율적인 마크업을 통해 접근성을 고려한 HTML 설계를 할 수 있습니다.","SASS를 이용해 복잡한 스타일을 모듈화하고 유지와 관리가 쉬운 코드로 작성하려고 노력합니다.","반응형 웹 디자인을 할 수 있습니다.","웹 표준을 지키고 웹 접근성을 높이려고 노력합니다."],
        "TypeScript_JavaScript":["웹 애플리케이션에 동적인 기능을 추가하며, 다양한 JavaScript 문법을 통해 효율적이고 확장성 있는 코드를 작성할 수 있습니다.","실행 컨텍스트, 호출 스택과 이벤트 루프의 동작 원리를 이해하여 사용하고, 코드의 가독성을 높이고 유지보수성을 향상시키려 노력합니다.","TypeScript를 이용하여 JavaScript에 정적 타입을 부여해 코드의 안정성과 가독성을 높이며, 대규모 애플리케이션 개발 시 유지보수가 용이하도록 합니다."],
        "react_next_vue":["합리적인 방식으로 컴포넌트를 분리하여 컴포넌트의 재사용성을 높입니다. Hooks를 활용한 상태 관리, Zustand, Redux, Context API를 통한 전역 상태 관리, 효율적인 가상 DOM 활용으로 성능을 최적화합니다.","CSR, ISG, SSG, SSR 4가지 렌더링 기법에 대해 이해하고, 각 페이지에 적절한 렌더링 기법을 선택하여 사용할 수 있으며, 동적 라우팅을 통한 효율적인 페이지 관리와 API 라우트 기능을 이용할 수 있습니다.","Vue의 템플릿 문법과 v-if, v-for 같은 디렉티브를 활용해 데이터 바인딩을 쉽게 관리하고, 컴포넌트 기반 설계를 통해 일관성과 유지보수를 용이하게하고, Vuex를 활용해 글로벌 상태를 관리하여 데이터의 흐름을 관리합니다."],
        "firebase_express":["express.json() 같은 기본 미들웨어와 함께 morgan 등 추가 미들웨어를 활용해 요청, 인증, 오류 처리 등을 관리할 수 있으며, 다양한 URL패턴을 처리하는 유연한 라우팅 시스템을 통해 클라이언트 요청을 쉽게 처리하고, 모듈화를 통해 코드 유지보수를 향상시키려 노력합니다.","Firestore 및 Realtime Database, NoSQL  방식의 데이터베이스로 실시간 데이터 업데이트를 지원하며, 복잡한 데이터를 손쉽게 관리하고 실시간 데이터 업데이트가 필요한 애플리케이션을 구축합니다."],
        "git_vercel":["협업과 버전 관리를 위한 중요한 도구로서, 브렌치 전략을 통한 코드 관리, Pull Request를 통한 코드 리뷰 등 Git 명령어와 워크플로우를 통해 프로젝트를 체계적으로 관리할 수 있습니다.","Next.js와의 최적화된 통합을 통해 쉽고 빠르게 애플리케이션을 배포합니다. 자동 빌드 및 베포를 통한 CI/CD를 구축합니다."]
        
    }}
}